{"version":3,"file":"static/js/835.dcde37e9.chunk.js","mappings":"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","sources":["views/Manageschools/Listingpage.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { Fragment } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./custom.css\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { MDBDataTableV5, MDBBtn } from \"mdbreact\";\r\n\r\n// // imports for modal\r\n// import {\r\n//   CModal,\r\n//   CModalHeader,\r\n//   CModalTitle,\r\n//   CModalBody,\r\n//   CModalFooter,\r\n//   CButton,\r\n// } from \"@coreui/react\";\r\n\r\n// import \"@fortawesome/fontawesome-free/css/all.min.css\";\r\n// import \"bootstrap-css-only/css/bootstrap.min.css\";\r\n// import \"mdbreact/dist/css/mdb.css\";\r\n\r\n// function Listingpage() {\r\n//   const navigate = useNavigate();\r\n\r\n//   const [schools, setschools] = useState([]);\r\n//   const [checkedschools, setCheckedSchools] = useState([]);\r\n//   const [visible, setVisible] = useState(false);\r\n//   const [DeleteSchoolId, setDeleteSchoolId] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     getallshools();\r\n//   }, [schools]);\r\n\r\n//   const getallshools = async () => {\r\n//     const res = await axios.get(\"http://18.118.42.224:3001/api/v1/schools/getall\");\r\n//     setschools(res.data.school);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     setDatatable({\r\n//       ...datatable,\r\n//       rows: schools.map((school, index) => ({\r\n//         check: (\r\n//           <div className=\"d-flex align-items-center justify-content-center\">\r\n//             <input\r\n//               class=\"form-check-input\"\r\n//               type=\"checkbox\"\r\n//               value=\"\"\r\n//               id=\"flexCheckDefault\"\r\n//               name={`nr${index}`}\r\n//               onChange={() => toggleCheck(`nr${index}`, school)}\r\n//               checked={checked[`nr${index}`]}\r\n//               // onChange={(e) => {\r\n//               //   if (e.target.checked) {\r\n//               //     setCheckedSchools((prevState) => [...prevState, school._id]);\r\n//               //   } else {\r\n//               //     setCheckedSchools((prevState) =>\r\n//               //       prevState.filter((id) => id !== school._id)\r\n//               //     );\r\n//               //   }\r\n//               // }}\r\n//             ></input>\r\n//           </div>\r\n//         ),\r\n//         \"Sr no\": index + 1,\r\n//         \"Name of School\": school.schoolName,\r\n//         \"Number of students\": school.numberOfStudents,\r\n//         Action: (\r\n//           <div>\r\n//             <button className=\"btn btn-sm\" onClick={() => editfnc(school._id)}>\r\n//               Edit\r\n//             </button>\r\n//             <button\r\n//               className=\"btn btn-sm\"\r\n//               // onClick={() => deletefnc(school._id)}\r\n//               onClick={() => {\r\n//                 setVisible(!visible);\r\n//                 setDeleteSchoolId(school._id);\r\n//               }}\r\n//             >\r\n//               Delete\r\n//             </button>\r\n//           </div>\r\n//         ),\r\n//       })),\r\n//     });\r\n//   }, [schools]);\r\n\r\n//   const consoleschools = () => {\r\n//     console.log(schools);\r\n//   };\r\n\r\n//   const editfnc = (schoolid) => {\r\n//     navigate(\"/editschool\", {\r\n//       state: { schoolid: schoolid },\r\n//     });\r\n//   };\r\n//   const deletefnc = async (id) => {\r\n//     try {\r\n//       console.log(id);\r\n//       const response = await axios.delete(\r\n//         `http://18.118.42.224:3001/api/v1/schools/delete/${id}`\r\n//       );\r\n//       setschools(schools.filter((school) => school._id !== id));\r\n//       console.log(response.data);\r\n//       setVisible(false);\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       setVisible(false);\r\n//     }\r\n//   };\r\n//   const redirectto = () => {\r\n//     navigate(\"/addschool\");\r\n//   };\r\n\r\n//   // table functions\r\n\r\n//   const [checked, setChecked] = useState({});\r\n\r\n//   const toggleCheck = (inputName, school) => {\r\n//     setChecked((prevState) => {\r\n//       const newState = { ...prevState };\r\n//       if (newState[inputName] === true) {\r\n//         setCheckedSchools((prevState) =>\r\n//           prevState.filter((id) => id !== school._id)\r\n//         );\r\n//       } else {\r\n//         setCheckedSchools((prevState) => [...prevState, school._id]);\r\n//       }\r\n//       newState[inputName] = !prevState[inputName];\r\n//       return newState;\r\n//     });\r\n//   };\r\n\r\n//   //  no checkboxes for now\r\n//   // data for table\r\n\r\n//   const [datatable, setDatatable] = useState({\r\n//     columns: [\r\n//       {\r\n//         label: (\r\n//           <div className=\"checkbox-container \">\r\n//             <input\r\n//               class=\"form-check-input sorting\"\r\n//               type=\"checkbox\"\r\n//               id=\"new\"\r\n//               onChange={consoleschools}\r\n//             />\r\n//           </div>\r\n//         ),\r\n//         field: \"check\",\r\n//         sort: \"disabled\",\r\n//         width: 10,\r\n//       },\r\n//       {\r\n//         label: \"Sr no\",\r\n//         field: \"Sr no\",\r\n//         sort: \"asc\",\r\n//         width: 100,\r\n//       },\r\n//       {\r\n//         label: \"Name of School\",\r\n//         field: \"Name of School\",\r\n//         width: 150,\r\n//         attributes: {\r\n//           \"aria-controls\": \"DataTable\",\r\n//           \"aria-label\": \"Name\",\r\n//         },\r\n//       },\r\n//       {\r\n//         label: \"Number of students\",\r\n//         field: \"Number of students\",\r\n//         width: 270,\r\n//       },\r\n//       {\r\n//         label: \"Action\",\r\n//         field: \"Action\",\r\n//         width: 200,\r\n//       },\r\n//     ],\r\n//     rows: [],\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"container h-100\">\r\n//       {/* modal */}\r\n//       <CModal\r\n//         backdrop=\"static\"\r\n//         visible={visible}\r\n//         onClose={() => setVisible(false)}\r\n//         aria-labelledby=\"StaticBackdropExampleLabel\"\r\n//       >\r\n//         <CModalHeader>\r\n//           <CModalTitle id=\"StaticBackdropExampleLabel\">\r\n//             Delete school\r\n//           </CModalTitle>\r\n//         </CModalHeader>\r\n//         <CModalBody>Are you sure you wish to delete this school?</CModalBody>\r\n//         <CModalFooter>\r\n//           <CButton color=\"secondary\" onClick={() => setVisible(false)}>\r\n//             Close\r\n//           </CButton>\r\n//           <CButton color=\"primary\" onClick={() => deletefnc(DeleteSchoolId)}>\r\n//             Yes!\r\n//           </CButton>\r\n//         </CModalFooter>\r\n//       </CModal>\r\n//       <div className=\"display-4 text-center pb-3 mb-5\">Schools</div>\r\n//       <div className=\"main-container d-flex w-50 mx-auto mb-3\">\r\n//         <div className=\"heading-div\">\r\n//           <div className=\"display-6 pb-3\">School listing</div>\r\n//         </div>\r\n\r\n//         <div className=\"d-flex align-items-center button-div\">\r\n//           <button\r\n//             className=\"btn btn-primary btn-sm\"\r\n//             onClick={() => {\r\n//               redirectto();\r\n//             }}\r\n//           >\r\n//             Add school\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* <table className=\"table w-50 mx-auto table-striped table-hover\">\r\n//         <thead className=\"thead-dark text-center\">\r\n//           <tr>\r\n//             <th scope=\"col\">Sr.No</th>\r\n//             <th scope=\"col\">Name of school</th>\r\n//             <th scope=\"col\">Number of students</th>\r\n//             <th scope=\"col\">Action</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {schools.map((school) => (\r\n//             <tr key={sount++} className=\"text-center\">\r\n//               <td>{count++}</td>\r\n//               <td>{school.schoolName}</td>\r\n//               <td>{school.numberOfStudents}</td>\r\n//               <td className=\"d-flex justify-content-between\">\r\n//                 <button\r\n//                   className=\"btn-primary btn\"\r\n//                   onClick={() => {\r\n//                     editfnc(school._id);\r\n//                   }}\r\n//                 >\r\n//                   Edit\r\n//                 </button>\r\n//                 <button\r\n//                   className=\"btn-dark btn\"\r\n//                   onClick={() => {\r\n//                     deletefnc(school._id);\r\n//                   }}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table> */}\r\n//       <div className=\"container d-flex justify-content-center\">\r\n//         <MDBDataTableV5\r\n//           hover\r\n//           entriesOptions={[1, 4, 10]}\r\n//           entries={2} ///it starts with 2 (on load)\r\n//           pagesAmount={2}\r\n//           data={datatable}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Listingpage;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport {\r\n  CButton,\r\n  CCol,\r\n  CForm,\r\n  CFormInput,\r\n  CInputGroup,\r\n  CInputGroupText,\r\n  CFormLabel,\r\n  CFormSelect,\r\n  CFormCheck,\r\n  CFormFeedback,\r\n  CInputFile,\r\n  CRow,\r\n  CContainer,\r\n  CPagination,\r\n  CPaginationItem,\r\n} from \"@coreui/react\";\r\nimport axios from \"axios\";\r\n// imports for modal\r\nimport {\r\n  CModal,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CModalFooter,\r\n} from \"@coreui/react\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\n\r\nfunction SchoolTable() {\r\n  const token = localStorage.getItem(\"accessToken\");\r\n  const getUsers = async () => {\r\n    try {\r\n      // const token =\r\n      //   \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1NGIzNzQxYTRlOTIyNzU1ZTEzZjUwYSIsImlhdCI6MTY5OTQzMjE5NiwiZXhwIjoxNzAyMDI0MTk2fQ.Gn_VwncOvLdq9728FXSIESpmSw8J7Nu5d0AyezbwoOU\";\r\n\r\n      const response = await axios.get(\r\n        \"http://18.118.42.224:3001/api/v1/schools/getall\",\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      console.log(response.data.school);\r\n      setdummystudents(response.data.school);\r\n    } catch (error) {\r\n      console.error(\"Error fetching users:\", error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getUsers();\r\n  }, []);\r\n\r\n  const navigate = useNavigate();\r\n  const [dummystudents, setdummystudents] = useState([]);\r\n  const [students, setStudents] = useState([]);\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const [selectAll, setSelectAll] = useState(false);\r\n  const [collecIds, setcollecIds] = useState([]);\r\n\r\n  const toggleSelectAll = () => {\r\n    setcollecIds([]);\r\n\r\n    if (!selectAll) {\r\n      const selectedIds = dummystudents.map((student) => student._id);\r\n      setcollecIds(selectedIds);\r\n    } else {\r\n      setcollecIds([]);\r\n    }\r\n    // setting frontend to checked\r\n    setSelectAll(!selectAll);\r\n    setdummystudents((prevStudents) =>\r\n      prevStudents.map((student) => ({ ...student, selected: !selectAll }))\r\n    );\r\n  };\r\n\r\n  const handleSelect = async (index) => {\r\n    const updatedStudents = [...dummystudents];\r\n    if (updatedStudents[index].selected === false) {\r\n      setcollecIds([...collecIds, updatedStudents[index]._id]);\r\n    } else {\r\n      setcollecIds((prevCollecIds) =>\r\n        prevCollecIds.filter((id) => id !== updatedStudents[index]._id)\r\n      );\r\n    }\r\n\r\n    updatedStudents[index].selected = !updatedStudents[index].selected;\r\n    setdummystudents(updatedStudents);\r\n  };\r\n\r\n  const deleteSelected = async () => {\r\n    // const token =\r\n    //   \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1NGIzNzQxYTRlOTIyNzU1ZTEzZjUwYSIsImlhdCI6MTY5OTQzMjE5NiwiZXhwIjoxNzAyMDI0MTk2fQ.Gn_VwncOvLdq9728FXSIESpmSw8J7Nu5d0AyezbwoOU\";\r\n\r\n    try {\r\n      const response = await axios.delete(\r\n        \"http://18.118.42.224:3001/api/v1/schools/delete\",\r\n        {\r\n          data: { ids: collecIds },\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n      console.log(response.data);\r\n      setVisible(false);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    getUsers();\r\n    // const updatedStudents =\r\n    // dummystudents.filter(\r\n    //   (student) => !student.selected\r\n    // );\r\n    // setdummystudents(updatedStudents);\r\n  };\r\n\r\n  const editStudent = (studentid) => {\r\n    navigate(\"/editschool\", {\r\n      state: { schoolid: studentid },\r\n    });\r\n  };\r\n\r\n  //   filter states\r\n  const [filterKeyword, setFilterKeyword] = useState(\"\");\r\n  const [filterClass, setFilterClass] = useState(\"\");\r\n  const [filterDivision, setFilterDivision] = useState(\"\");\r\n  const [filterMinBehaviorPoints, setFilterMinBehaviorPoints] = useState(\"\");\r\n  const [filterMaxBehaviorPoints, setFilterMaxBehaviorPoints] = useState(\"\");\r\n\r\n  //   function calling in the table\r\n  const applyFilters = (student) => {\r\n    // Apply filters to the student based on filter values\r\n    return (\r\n      // student.firstName.toLowerCase().includes(filterKeyword.toLowerCase()) &&\r\n      (filterClass === \"\" || student.class === filterClass) &&\r\n      (filterDivision === \"\" || student.division === filterDivision) &&\r\n      (filterMinBehaviorPoints === \"\" ||\r\n        student.numberOfStudents >= parseInt(filterMinBehaviorPoints)) &&\r\n      (filterMaxBehaviorPoints === \"\" ||\r\n        student.numberOfStudents <= parseInt(filterMaxBehaviorPoints))\r\n    );\r\n  };\r\n\r\n  //   pagination\r\n\r\n  //   const [pageSize] = useState(4);\r\n  const [pageSize, setpageSize] = useState(students.length);\r\n  const [currentPage, setCurrentPage] = useState(1); // Current page, starts at 1\r\n\r\n  const handlePageChange = (newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  // Calculate the range of students to display based on the current page\r\n  const startIndex = (currentPage - 1) * pageSize;\r\n  const endIndex = startIndex + pageSize;\r\n  const displayedStudents = students.slice(startIndex, endIndex);\r\n\r\n  const numPages = Math.ceil(students.length / pageSize);\r\n\r\n  //   exporting to excel sheet\r\n\r\n  const exportToCSV = () => {\r\n    const selectedStudents = dummystudents.filter(\r\n      (student) => student.selected\r\n    );\r\n    const headers = [\"Name\", \"Class\", \"Division\", \"Behavior Points\", \"Status\"];\r\n    const csvData = [headers].concat(\r\n      selectedStudents.map((student) => [\r\n        student.firstName,\r\n        student.class,\r\n        student.division,\r\n        student.behaviousPoints.positivePoints -\r\n          student.behaviousPoints.negativePoints,\r\n        student.active ? \"Active\" : \"Inactive\",\r\n      ])\r\n    );\r\n\r\n    // Convert the data to a CSV string\r\n    const csvContent = csvData.map((row) => row.join(\",\")).join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    // Create a download link\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"selected_students.csv\"; // File name\r\n    a.style.display = \"none\";\r\n    document.body.appendChild(a);\r\n\r\n    a.click(); // Trigger the download\r\n    URL.revokeObjectURL(url); // Release the object URL\r\n    document.body.removeChild(a);\r\n  };\r\n\r\n  const redirectto = () => {\r\n    navigate(\"/addschool\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* modal */}\r\n      <CModal\r\n        backdrop=\"static\"\r\n        visible={visible}\r\n        onClose={() => {\r\n          setVisible(false);\r\n          setcollecIds([]);\r\n        }}\r\n        aria-labelledby=\"StaticBackdropExampleLabel\"\r\n      >\r\n        <CModalHeader>\r\n          <CModalTitle id=\"StaticBackdropExampleLabel\">\r\n            Delete schools\r\n          </CModalTitle>\r\n        </CModalHeader>\r\n        <CModalBody>Are you sure you wish to delete the schools?</CModalBody>\r\n        <CModalFooter>\r\n          <CButton\r\n            color=\"secondary\"\r\n            onClick={() => {\r\n              setVisible(false);\r\n              setcollecIds([]);\r\n            }}\r\n          >\r\n            Close\r\n          </CButton>\r\n          <CButton color=\"primary\" onClick={() => deleteSelected()}>\r\n            Yes!\r\n          </CButton>\r\n        </CModalFooter>\r\n      </CModal>\r\n      {/* Filters */}\r\n      <div className=\"mb-2\">\r\n        <div className=\"row pb-5\">\r\n          <div className=\"col-md-6 \">\r\n            <div className=\"display-6 pb-3 float-end\">School listing</div>\r\n          </div>\r\n\r\n          <div className=\"col-md-6 \">\r\n            <button\r\n              className=\"btn btn-primary float-end\"\r\n              onClick={() => {\r\n                redirectto();\r\n              }}\r\n            >\r\n              Add School\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {/* filters */}\r\n        <div className=\"filters d-flex justify-content-between\">\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            placeholder=\"Search by keyword\"\r\n            value={filterKeyword}\r\n            onChange={(e) => setFilterKeyword(e.target.value)}\r\n          />\r\n          <select\r\n            className=\"form-select\"\r\n            value={filterClass}\r\n            onChange={(e) => setFilterClass(e.target.value)}\r\n          >\r\n            <option value=\"\">Name of school</option>\r\n            <option>Grade 2</option>\r\n            <option>Grade 3</option>\r\n            <option>Grade 1</option>\r\n          </select>\r\n\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            placeholder=\"Min no of students\"\r\n            value={filterMinBehaviorPoints}\r\n            onChange={(e) => setFilterMinBehaviorPoints(e.target.value)}\r\n          />\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            placeholder=\"Max no of students\"\r\n            value={filterMaxBehaviorPoints}\r\n            onChange={(e) => setFilterMaxBehaviorPoints(e.target.value)}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* buttons for action */}\r\n\r\n      <div className=\"pb-4 flex-wrap\">\r\n        <button\r\n          className=\"btn btn-dark btn-md \"\r\n          onClick={() => {\r\n            setVisible(!visible);\r\n          }}\r\n        >\r\n          Delete Selected\r\n        </button>\r\n        <button\r\n          className=\"btn btn-success btn-md float-end\"\r\n          onClick={exportToCSV}\r\n        >\r\n          Export to Excel\r\n        </button>\r\n      </div>\r\n\r\n      <table className=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"text-center\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={selectAll}\r\n                onChange={toggleSelectAll}\r\n              />\r\n            </th>\r\n            <th className=\"text-center\">Name of School</th>\r\n            <th className=\"text-center\">Number of students</th>\r\n            <th className=\"text-center\">Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {dummystudents\r\n            .filter((student) => applyFilters(student))\r\n            .map((student, index) => (\r\n              <tr key={index}>\r\n                <td className=\"text-center align-middle\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={student.selected}\r\n                    onChange={() => handleSelect(index)}\r\n                  />\r\n                </td>\r\n                <td className=\"text-center align-middle\">\r\n                  {student.schoolName}\r\n                </td>\r\n\r\n                <td className=\"text-center align-middle\">\r\n                  {student.numberOfStudents}\r\n                </td>\r\n                <td className=\"text-center align-middle\">\r\n                  <button\r\n                    className=\"btn btn-primary btn-md\"\r\n                    onClick={() => {\r\n                      editStudent(student._id);\r\n                    }}\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                  <button\r\n                    className=\"btn btn-dark btn-md\"\r\n                    onClick={() => {\r\n                      setcollecIds([]);\r\n                      setcollecIds([student._id]);\r\n                      setVisible(true);\r\n                    }}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"pagination\">\r\n        <CPagination aria-label=\"Page navigation\">\r\n          <CPaginationItem\r\n            onClick={() => handlePageChange(currentPage - 1)}\r\n            disabled={currentPage === 1}\r\n          >\r\n            Previous\r\n          </CPaginationItem>\r\n          {Array.from({ length: numPages }, (_, i) => (\r\n            <CPaginationItem\r\n              key={i}\r\n              active={currentPage === i + 1}\r\n              onClick={() => handlePageChange(i + 1)}\r\n            >\r\n              {i + 1}\r\n            </CPaginationItem>\r\n          ))}\r\n          <CPaginationItem\r\n            onClick={() => handlePageChange(currentPage + 1)}\r\n            disabled={currentPage === Math.ceil(students.length / pageSize)}\r\n          >\r\n            Next\r\n          </CPaginationItem>\r\n\r\n          <div className=\"d-flex\">\r\n            <CPaginationItem>Entries:</CPaginationItem>\r\n            <CPaginationItem>\r\n              <select\r\n                value={pageSize}\r\n                onChange={(e) => setpageSize(e.target.value)}\r\n              >\r\n                <option value=\"2\">2</option>\r\n                <option value=\"4\">4</option>\r\n                <option value={students.length}>all</option>\r\n                {/* Add more options as needed */}\r\n              </select>\r\n            </CPaginationItem>\r\n          </div>\r\n        </CPagination>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SchoolTable;\r\n"],"names":["token","localStorage","getItem","getUsers","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","axios","get","headers","Authorization","concat","sent","console","log","data","school","setdummystudents","t0","error","stop","apply","arguments","useEffect","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","dummystudents","_useState3","_useState4","students","_useState5","_useState6","visible","setVisible","_useState7","_useState8","selectAll","setSelectAll","_useState9","_useState10","collecIds","setcollecIds","handleSelect","_ref2","_callee2","index","updatedStudents","_context2","_toConsumableArray","selected","_id","prevCollecIds","filter","id","_x","deleteSelected","_ref3","_callee3","_context3","delete","ids","_useState11","_useState12","filterKeyword","setFilterKeyword","_useState13","_useState14","filterClass","setFilterClass","_useState15","_useState16","filterDivision","_useState17","_useState18","filterMinBehaviorPoints","setFilterMinBehaviorPoints","_useState19","_useState20","filterMaxBehaviorPoints","setFilterMaxBehaviorPoints","_useState21","length","_useState22","pageSize","setpageSize","_useState23","_useState24","currentPage","setCurrentPage","handlePageChange","newPage","startIndex","endIndex","numPages","slice","Math","ceil","_jsxs","children","CModal","backdrop","onClose","_jsx","CModalHeader","CModalTitle","CModalBody","CModalFooter","CButton","color","onClick","className","type","placeholder","value","onChange","e","target","selectedStudents","student","csvContent","map","firstName","class","division","behaviousPoints","positivePoints","negativePoints","active","row","join","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","style","display","body","appendChild","click","revokeObjectURL","removeChild","checked","selectedIds","prevStudents","_objectSpread","numberOfStudents","parseInt","applyFilters","schoolName","studentid","state","schoolid","CPagination","CPaginationItem","disabled","Array","from","_","i"],"sourceRoot":""}