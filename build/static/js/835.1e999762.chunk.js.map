{"version":3,"file":"static/js/835.1e999762.chunk.js","mappings":"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","sources":["views/Manageschools/Listingpage.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { Fragment } from \"react\";\n// import axios from \"axios\";\n// import \"./custom.css\";\n// import { useNavigate } from \"react-router-dom\";\n// import { MDBDataTableV5, MDBBtn } from \"mdbreact\";\n\n// // imports for modal\n// import {\n//   CModal,\n//   CModalHeader,\n//   CModalTitle,\n//   CModalBody,\n//   CModalFooter,\n//   CButton,\n// } from \"@coreui/react\";\n\n// import \"@fortawesome/fontawesome-free/css/all.min.css\";\n// import \"bootstrap-css-only/css/bootstrap.min.css\";\n// import \"mdbreact/dist/css/mdb.css\";\n\n// function Listingpage() {\n//   const navigate = useNavigate();\n\n//   const [schools, setschools] = useState([]);\n//   const [checkedschools, setCheckedSchools] = useState([]);\n//   const [visible, setVisible] = useState(false);\n//   const [DeleteSchoolId, setDeleteSchoolId] = useState(\"\");\n\n//   useEffect(() => {\n//     getallshools();\n//   }, [schools]);\n\n//   const getallshools = async () => {\n//     const res = await axios.get(\"http://localhost:3001/api/v1/schools/getall\");\n//     setschools(res.data.school);\n//   };\n\n//   useEffect(() => {\n//     setDatatable({\n//       ...datatable,\n//       rows: schools.map((school, index) => ({\n//         check: (\n//           <div className=\"d-flex align-items-center justify-content-center\">\n//             <input\n//               class=\"form-check-input\"\n//               type=\"checkbox\"\n//               value=\"\"\n//               id=\"flexCheckDefault\"\n//               name={`nr${index}`}\n//               onChange={() => toggleCheck(`nr${index}`, school)}\n//               checked={checked[`nr${index}`]}\n//               // onChange={(e) => {\n//               //   if (e.target.checked) {\n//               //     setCheckedSchools((prevState) => [...prevState, school._id]);\n//               //   } else {\n//               //     setCheckedSchools((prevState) =>\n//               //       prevState.filter((id) => id !== school._id)\n//               //     );\n//               //   }\n//               // }}\n//             ></input>\n//           </div>\n//         ),\n//         \"Sr no\": index + 1,\n//         \"Name of School\": school.schoolName,\n//         \"Number of students\": school.numberOfStudents,\n//         Action: (\n//           <div>\n//             <button className=\"btn btn-sm\" onClick={() => editfnc(school._id)}>\n//               Edit\n//             </button>\n//             <button\n//               className=\"btn btn-sm\"\n//               // onClick={() => deletefnc(school._id)}\n//               onClick={() => {\n//                 setVisible(!visible);\n//                 setDeleteSchoolId(school._id);\n//               }}\n//             >\n//               Delete\n//             </button>\n//           </div>\n//         ),\n//       })),\n//     });\n//   }, [schools]);\n\n//   const consoleschools = () => {\n//     console.log(schools);\n//   };\n\n//   const editfnc = (schoolid) => {\n//     navigate(\"/editschool\", {\n//       state: { schoolid: schoolid },\n//     });\n//   };\n//   const deletefnc = async (id) => {\n//     try {\n//       console.log(id);\n//       const response = await axios.delete(\n//         `http://localhost:3001/api/v1/schools/delete/${id}`\n//       );\n//       setschools(schools.filter((school) => school._id !== id));\n//       console.log(response.data);\n//       setVisible(false);\n//     } catch (error) {\n//       console.error(error);\n//       setVisible(false);\n//     }\n//   };\n//   const redirectto = () => {\n//     navigate(\"/addschool\");\n//   };\n\n//   // table functions\n\n//   const [checked, setChecked] = useState({});\n\n//   const toggleCheck = (inputName, school) => {\n//     setChecked((prevState) => {\n//       const newState = { ...prevState };\n//       if (newState[inputName] === true) {\n//         setCheckedSchools((prevState) =>\n//           prevState.filter((id) => id !== school._id)\n//         );\n//       } else {\n//         setCheckedSchools((prevState) => [...prevState, school._id]);\n//       }\n//       newState[inputName] = !prevState[inputName];\n//       return newState;\n//     });\n//   };\n\n//   //  no checkboxes for now\n//   // data for table\n\n//   const [datatable, setDatatable] = useState({\n//     columns: [\n//       {\n//         label: (\n//           <div className=\"checkbox-container \">\n//             <input\n//               class=\"form-check-input sorting\"\n//               type=\"checkbox\"\n//               id=\"new\"\n//               onChange={consoleschools}\n//             />\n//           </div>\n//         ),\n//         field: \"check\",\n//         sort: \"disabled\",\n//         width: 10,\n//       },\n//       {\n//         label: \"Sr no\",\n//         field: \"Sr no\",\n//         sort: \"asc\",\n//         width: 100,\n//       },\n//       {\n//         label: \"Name of School\",\n//         field: \"Name of School\",\n//         width: 150,\n//         attributes: {\n//           \"aria-controls\": \"DataTable\",\n//           \"aria-label\": \"Name\",\n//         },\n//       },\n//       {\n//         label: \"Number of students\",\n//         field: \"Number of students\",\n//         width: 270,\n//       },\n//       {\n//         label: \"Action\",\n//         field: \"Action\",\n//         width: 200,\n//       },\n//     ],\n//     rows: [],\n//   });\n\n//   return (\n//     <div className=\"container h-100\">\n//       {/* modal */}\n//       <CModal\n//         backdrop=\"static\"\n//         visible={visible}\n//         onClose={() => setVisible(false)}\n//         aria-labelledby=\"StaticBackdropExampleLabel\"\n//       >\n//         <CModalHeader>\n//           <CModalTitle id=\"StaticBackdropExampleLabel\">\n//             Delete school\n//           </CModalTitle>\n//         </CModalHeader>\n//         <CModalBody>Are you sure you wish to delete this school?</CModalBody>\n//         <CModalFooter>\n//           <CButton color=\"secondary\" onClick={() => setVisible(false)}>\n//             Close\n//           </CButton>\n//           <CButton color=\"primary\" onClick={() => deletefnc(DeleteSchoolId)}>\n//             Yes!\n//           </CButton>\n//         </CModalFooter>\n//       </CModal>\n//       <div className=\"display-4 text-center pb-3 mb-5\">Schools</div>\n//       <div className=\"main-container d-flex w-50 mx-auto mb-3\">\n//         <div className=\"heading-div\">\n//           <div className=\"display-6 pb-3\">School listing</div>\n//         </div>\n\n//         <div className=\"d-flex align-items-center button-div\">\n//           <button\n//             className=\"btn btn-primary btn-sm\"\n//             onClick={() => {\n//               redirectto();\n//             }}\n//           >\n//             Add school\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* <table className=\"table w-50 mx-auto table-striped table-hover\">\n//         <thead className=\"thead-dark text-center\">\n//           <tr>\n//             <th scope=\"col\">Sr.No</th>\n//             <th scope=\"col\">Name of school</th>\n//             <th scope=\"col\">Number of students</th>\n//             <th scope=\"col\">Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schools.map((school) => (\n//             <tr key={sount++} className=\"text-center\">\n//               <td>{count++}</td>\n//               <td>{school.schoolName}</td>\n//               <td>{school.numberOfStudents}</td>\n//               <td className=\"d-flex justify-content-between\">\n//                 <button\n//                   className=\"btn-primary btn\"\n//                   onClick={() => {\n//                     editfnc(school._id);\n//                   }}\n//                 >\n//                   Edit\n//                 </button>\n//                 <button\n//                   className=\"btn-dark btn\"\n//                   onClick={() => {\n//                     deletefnc(school._id);\n//                   }}\n//                 >\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table> */}\n//       <div className=\"container d-flex justify-content-center\">\n//         <MDBDataTableV5\n//           hover\n//           entriesOptions={[1, 4, 10]}\n//           entries={2} ///it starts with 2 (on load)\n//           pagesAmount={2}\n//           data={datatable}\n//         />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Listingpage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CFormLabel,\n  CFormSelect,\n  CFormCheck,\n  CFormFeedback,\n  CInputFile,\n  CRow,\n  CContainer,\n  CPagination,\n  CPaginationItem,\n} from \"@coreui/react\";\nimport axios from \"axios\";\n// imports for modal\nimport {\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CModalFooter,\n} from \"@coreui/react\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nfunction SchoolTable() {\n  const getUsers = async () => {\n    try {\n      const token =\n        \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1NGIzNzQxYTRlOTIyNzU1ZTEzZjUwYSIsImlhdCI6MTY5OTQzMjE5NiwiZXhwIjoxNzAyMDI0MTk2fQ.Gn_VwncOvLdq9728FXSIESpmSw8J7Nu5d0AyezbwoOU\";\n\n      const response = await axios.get(\n        \"http://localhost:3001/api/v1/schools/getall\",\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      console.log(response.data.school);\n      setdummystudents(response.data.school);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n    }\n  };\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  const navigate = useNavigate();\n  const [dummystudents, setdummystudents] = useState([]);\n  const [students, setStudents] = useState([]);\n  const [visible, setVisible] = useState(false);\n\n  const [selectAll, setSelectAll] = useState(false);\n  const [collecIds, setcollecIds] = useState([]);\n\n  const toggleSelectAll = () => {\n    setcollecIds([]);\n\n    if (!selectAll) {\n      const selectedIds = dummystudents.map((student) => student._id);\n      setcollecIds(selectedIds);\n    } else {\n      setcollecIds([]);\n    }\n    // setting frontend to checked\n    setSelectAll(!selectAll);\n    setdummystudents((prevStudents) =>\n      prevStudents.map((student) => ({ ...student, selected: !selectAll }))\n    );\n  };\n\n  const handleSelect = async (index) => {\n    const updatedStudents = [...dummystudents];\n    if (updatedStudents[index].selected === false) {\n      setcollecIds([...collecIds, updatedStudents[index]._id]);\n    } else {\n      setcollecIds((prevCollecIds) =>\n        prevCollecIds.filter((id) => id !== updatedStudents[index]._id)\n      );\n    }\n\n    updatedStudents[index].selected = !updatedStudents[index].selected;\n    setdummystudents(updatedStudents);\n  };\n\n  const deleteSelected = async () => {\n    const token =\n      \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1NGIzNzQxYTRlOTIyNzU1ZTEzZjUwYSIsImlhdCI6MTY5OTQzMjE5NiwiZXhwIjoxNzAyMDI0MTk2fQ.Gn_VwncOvLdq9728FXSIESpmSw8J7Nu5d0AyezbwoOU\";\n\n    try {\n      const response = await axios.delete(\n        \"http://localhost:3001/api/v1/schools/delete\",\n        {\n          data: { ids: collecIds },\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      console.log(response.data);\n      setVisible(false);\n    } catch (error) {\n      console.error(error);\n    }\n    getUsers();\n    // const updatedStudents =\n    // dummystudents.filter(\n    //   (student) => !student.selected\n    // );\n    // setdummystudents(updatedStudents);\n  };\n\n  const editStudent = (studentid) => {\n    navigate(\"/editschool\", {\n      state: { schoolid: studentid },\n    });\n  };\n\n  //   filter states\n  const [filterKeyword, setFilterKeyword] = useState(\"\");\n  const [filterClass, setFilterClass] = useState(\"\");\n  const [filterDivision, setFilterDivision] = useState(\"\");\n  const [filterMinBehaviorPoints, setFilterMinBehaviorPoints] = useState(\"\");\n  const [filterMaxBehaviorPoints, setFilterMaxBehaviorPoints] = useState(\"\");\n\n  //   function calling in the table\n  const applyFilters = (student) => {\n    // Apply filters to the student based on filter values\n    return (\n      // student.firstName.toLowerCase().includes(filterKeyword.toLowerCase()) &&\n      (filterClass === \"\" || student.class === filterClass) &&\n      (filterDivision === \"\" || student.division === filterDivision) &&\n      (filterMinBehaviorPoints === \"\" ||\n        student.numberOfStudents >= parseInt(filterMinBehaviorPoints)) &&\n      (filterMaxBehaviorPoints === \"\" ||\n        student.numberOfStudents <= parseInt(filterMaxBehaviorPoints))\n    );\n  };\n\n  //   pagination\n\n  //   const [pageSize] = useState(4);\n  const [pageSize, setpageSize] = useState(students.length);\n  const [currentPage, setCurrentPage] = useState(1); // Current page, starts at 1\n\n  const handlePageChange = (newPage) => {\n    setCurrentPage(newPage);\n  };\n\n  // Calculate the range of students to display based on the current page\n  const startIndex = (currentPage - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const displayedStudents = students.slice(startIndex, endIndex);\n\n  const numPages = Math.ceil(students.length / pageSize);\n\n  //   exporting to excel sheet\n\n  const exportToCSV = () => {\n    const selectedStudents = dummystudents.filter(\n      (student) => student.selected\n    );\n    const headers = [\"Name\", \"Class\", \"Division\", \"Behavior Points\", \"Status\"];\n    const csvData = [headers].concat(\n      selectedStudents.map((student) => [\n        student.firstName,\n        student.class,\n        student.division,\n        student.behaviousPoints.positivePoints -\n          student.behaviousPoints.negativePoints,\n        student.active ? \"Active\" : \"Inactive\",\n      ])\n    );\n\n    // Convert the data to a CSV string\n    const csvContent = csvData.map((row) => row.join(\",\")).join(\"\\n\");\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = URL.createObjectURL(blob);\n\n    // Create a download link\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"selected_students.csv\"; // File name\n    a.style.display = \"none\";\n    document.body.appendChild(a);\n\n    a.click(); // Trigger the download\n    URL.revokeObjectURL(url); // Release the object URL\n    document.body.removeChild(a);\n  };\n\n  const redirectto = () => {\n    navigate(\"/addschool\");\n  };\n\n  return (\n    <div>\n      {/* modal */}\n      <CModal\n        backdrop=\"static\"\n        visible={visible}\n        onClose={() => {\n          setVisible(false);\n          setcollecIds([]);\n        }}\n        aria-labelledby=\"StaticBackdropExampleLabel\"\n      >\n        <CModalHeader>\n          <CModalTitle id=\"StaticBackdropExampleLabel\">\n            Delete schools\n          </CModalTitle>\n        </CModalHeader>\n        <CModalBody>Are you sure you wish to delete the schools?</CModalBody>\n        <CModalFooter>\n          <CButton\n            color=\"secondary\"\n            onClick={() => {\n              setVisible(false);\n              setcollecIds([]);\n            }}\n          >\n            Close\n          </CButton>\n          <CButton color=\"primary\" onClick={() => deleteSelected()}>\n            Yes!\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      {/* Filters */}\n      <div className=\"mb-2\">\n        <div className=\"row pb-5\">\n          <div className=\"col-md-6 \">\n            <div className=\"display-6 pb-3 float-end\">School listing</div>\n          </div>\n\n          <div className=\"col-md-6 \">\n            <button\n              className=\"btn btn-primary float-end\"\n              onClick={() => {\n                redirectto();\n              }}\n            >\n              Add School\n            </button>\n          </div>\n        </div>\n        {/* filters */}\n        <div className=\"filters d-flex justify-content-between\">\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            placeholder=\"Search by keyword\"\n            value={filterKeyword}\n            onChange={(e) => setFilterKeyword(e.target.value)}\n          />\n          <select\n            className=\"form-select\"\n            value={filterClass}\n            onChange={(e) => setFilterClass(e.target.value)}\n          >\n            <option value=\"\">Name of school</option>\n            <option>Grade 2</option>\n            <option>Grade 3</option>\n            <option>Grade 1</option>\n          </select>\n\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            placeholder=\"Min no of students\"\n            value={filterMinBehaviorPoints}\n            onChange={(e) => setFilterMinBehaviorPoints(e.target.value)}\n          />\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            placeholder=\"Max no of students\"\n            value={filterMaxBehaviorPoints}\n            onChange={(e) => setFilterMaxBehaviorPoints(e.target.value)}\n          />\n        </div>\n      </div>\n\n      {/* buttons for action */}\n\n      <div className=\"pb-4 flex-wrap\">\n        <button\n          className=\"btn btn-dark btn-md \"\n          onClick={() => {\n            setVisible(!visible);\n          }}\n        >\n          Delete Selected\n        </button>\n        <button\n          className=\"btn btn-success btn-md float-end\"\n          onClick={exportToCSV}\n        >\n          Export to Excel\n        </button>\n      </div>\n\n      <table className=\"table table-bordered\">\n        <thead>\n          <tr>\n            <th className=\"text-center\">\n              <input\n                type=\"checkbox\"\n                checked={selectAll}\n                onChange={toggleSelectAll}\n              />\n            </th>\n            <th className=\"text-center\">Name of School</th>\n            <th className=\"text-center\">Number of students</th>\n            <th className=\"text-center\">Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {dummystudents\n            .filter((student) => applyFilters(student))\n            .map((student, index) => (\n              <tr key={index}>\n                <td className=\"text-center align-middle\">\n                  <input\n                    type=\"checkbox\"\n                    checked={student.selected}\n                    onChange={() => handleSelect(index)}\n                  />\n                </td>\n                <td className=\"text-center align-middle\">\n                  {student.schoolName}\n                </td>\n\n                <td className=\"text-center align-middle\">\n                  {student.numberOfStudents}\n                </td>\n                <td className=\"text-center align-middle\">\n                  <button\n                    className=\"btn btn-primary btn-md\"\n                    onClick={() => {\n                      editStudent(student._id);\n                    }}\n                  >\n                    Edit\n                  </button>\n                  <button\n                    className=\"btn btn-dark btn-md\"\n                    onClick={() => {\n                      setcollecIds([]);\n                      setcollecIds([student._id]);\n                      setVisible(true);\n                    }}\n                  >\n                    Delete\n                  </button>\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <CPagination aria-label=\"Page navigation\">\n          <CPaginationItem\n            onClick={() => handlePageChange(currentPage - 1)}\n            disabled={currentPage === 1}\n          >\n            Previous\n          </CPaginationItem>\n          {Array.from({ length: numPages }, (_, i) => (\n            <CPaginationItem\n              key={i}\n              active={currentPage === i + 1}\n              onClick={() => handlePageChange(i + 1)}\n            >\n              {i + 1}\n            </CPaginationItem>\n          ))}\n          <CPaginationItem\n            onClick={() => handlePageChange(currentPage + 1)}\n            disabled={currentPage === Math.ceil(students.length / pageSize)}\n          >\n            Next\n          </CPaginationItem>\n\n          <div className=\"d-flex\">\n            <CPaginationItem>Entries:</CPaginationItem>\n            <CPaginationItem>\n              <select\n                value={pageSize}\n                onChange={(e) => setpageSize(e.target.value)}\n              >\n                <option value=\"2\">2</option>\n                <option value=\"4\">4</option>\n                <option value={students.length}>all</option>\n                {/* Add more options as needed */}\n              </select>\n            </CPaginationItem>\n          </div>\n        </CPagination>\n      </div>\n    </div>\n  );\n}\n\nexport default SchoolTable;\n"],"names":["getUsers","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","axios","get","headers","Authorization","concat","sent","console","log","data","school","setdummystudents","t0","error","stop","apply","arguments","useEffect","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","dummystudents","_useState3","_useState4","students","_useState5","_useState6","visible","setVisible","_useState7","_useState8","selectAll","setSelectAll","_useState9","_useState10","collecIds","setcollecIds","handleSelect","_ref2","_callee2","index","updatedStudents","_context2","_toConsumableArray","selected","_id","prevCollecIds","filter","id","_x","deleteSelected","_ref3","_callee3","_context3","delete","ids","_useState11","_useState12","filterKeyword","setFilterKeyword","_useState13","_useState14","filterClass","setFilterClass","_useState15","_useState16","filterDivision","_useState17","_useState18","filterMinBehaviorPoints","setFilterMinBehaviorPoints","_useState19","_useState20","filterMaxBehaviorPoints","setFilterMaxBehaviorPoints","_useState21","length","_useState22","pageSize","setpageSize","_useState23","_useState24","currentPage","setCurrentPage","handlePageChange","newPage","startIndex","endIndex","numPages","slice","Math","ceil","_jsxs","children","CModal","backdrop","onClose","_jsx","CModalHeader","CModalTitle","CModalBody","CModalFooter","CButton","color","onClick","className","type","placeholder","value","onChange","e","target","selectedStudents","student","csvContent","map","firstName","class","division","behaviousPoints","positivePoints","negativePoints","active","row","join","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","style","display","body","appendChild","click","revokeObjectURL","removeChild","checked","selectedIds","prevStudents","_objectSpread","numberOfStudents","parseInt","applyFilters","schoolName","studentid","state","schoolid","CPagination","CPaginationItem","disabled","Array","from","_","i"],"sourceRoot":""}